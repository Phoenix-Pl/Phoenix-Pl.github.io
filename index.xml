<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phoenix-Pl’s Blog</title>
    <link>https://Phoenix-Pl.github.io/</link>
    <description>Recent content on Phoenix-Pl’s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Mon, 11 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://Phoenix-Pl.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown Syntax</title>
      <link>https://Phoenix-Pl.github.io/post/markdown-syntax/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sqli Labs Less 32-37 宽字节注入</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less32-37%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less32-37%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</guid>
      <description>前置知识 宽字节注入 这里参考这位大佬的文章：点击 在mysql中，用于转义（即在字符串中的符号前加上”\”）的函数有addslashes，mysql_real_escape_string，mysql_es</description>
    </item>
    
    <item>
      <title>Sqli Labs Less 38-53 堆叠注入</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less38-53%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less38-53%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</guid>
      <description>前置知识 堆叠注入： 这里引用这位大佬的博客：点击 0x00 堆叠注入定义 Stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。而在真实的运用中也是这样的, 我们知道在 mysql 中, 主要是</description>
    </item>
    
    <item>
      <title>Sqli Labs Less 54-65</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less54-65/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less54-65/</guid>
      <description>less-54 这一关只有十次机会，超过十次就会重置表名和密码 http://localhost/sqli-labs-master/Less-54/?id=1 回显正常 http://localhost/sqli-labs-master/Less-54/?id=1&#39; 回显异常 http://localhost/sqli-labs-master/Less-54/?id=1&#39; --+回显正常。 说明单引号闭合。 http://localhost/sqli-labs-master/Less-54/?id=1&#39; order by 2 --+ 回显正常 http://localhost/sqli-labs-master/Less-54/?id=1&#39; order by 3 --+ 回显正常 http://localhost/sqli-labs-master/Less-54/?id=1&#39; order by 4 --+ 回显异常 说明有三个字段。 找回显位置 http://localhost/sqli-labs-master/Less-54/?id=-1&#39; union select 1,2,3 --+回显</description>
    </item>
    
    <item>
      <title>Sqli-labs-less 1-6</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less1-6/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less1-6/</guid>
      <description>预备知识 基础mysql语句： 查库： select schema_name from information_schema.schemata; 查表： select table_name from information_schema.tables where table_schema=&#39;security&#39;; 查字段： select column_name from information_schema.columns where table_name=&#39;users&#39;; 查表： select username,password from security.users; 辅助配置 找到sqli-labs-master 中 less-xx 中 index.php 添加以下代码 echo $sql; //将构造的Sql语句输出 echo &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; //换行</description>
    </item>
    
    <item>
      <title>Sqli-labs-less 11-22</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less11-22/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less11-22/</guid>
      <description>less-11 这关开始换了种方式 ==POST== ，前面的都是==GET== 基础知识 GET和POST的区别 最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。 GET和POST还有一个重大区别 简</description>
    </item>
    
    <item>
      <title>Sqli-labs-less 22-28a</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less23-28a/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less23-28a/</guid>
      <description>less-23 首先还是单引号尝试 http://localhost/sqli-labs-master/Less-23/?id=1&#39; 发现报错 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1 并且由 &#39;1&#39;&#39; LIMIT 0,1 可知是单引号闭合 但当我们用--+或者%23注释时，还是报错 这时有些疑惑，看了一下源码 发现这里对 #</description>
    </item>
    
    <item>
      <title>Sqli-labs-less 29-31 绕过WAF</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less29-31%E7%BB%95%E8%BF%87waf/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less29-31%E7%BB%95%E8%BF%87waf/</guid>
      <description>less-29 这里参考聂师傅、薛大佬以及Mysql注入天书 emmm&amp;hellip;还有就是这关的 JSP 环境我没有搭建出来&amp;hellip;所以下面的截图来自于b站UP 然后网上的教程搭建JSP环境是用 jspstudy 搭建的，如果有小伙</description>
    </item>
    
    <item>
      <title>Sqli-labs-less 7-10</title>
      <link>https://Phoenix-Pl.github.io/post/sqli-labs-less7-10/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/sqli-labs-less7-10/</guid>
      <description>less-07 前置知识 由于是用 phpstudy 搭建的，所以需要进行一些配置 1、在mysql命令行中输入show variables like &#39;%secure%&#39;;查看secure-file-priv 如果为NULL 则需要在 ././Mysql/my.ini 文件中加上一句secure_f</description>
    </item>
    
    <item>
      <title>Upload-labs全关详解</title>
      <link>https://Phoenix-Pl.github.io/post/upload-labs%E5%85%A8%E5%85%B3%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/upload-labs%E5%85%A8%E5%85%B3%E8%AF%A6%E8%A7%A3/</guid>
      <description>PS:这只是个菜鸟的小小记录，参考很多大佬的博客，有什么不正确的地方欢迎指正 PASS-01 解题思路:（绕开前端JS验证） 尝试：首先先挂了代理想上传个php用Burp抓个包看看，但是还没抓到包就提示该文件不允许上传</description>
    </item>
    
    <item>
      <title>XSS漏洞详解</title>
      <link>https://Phoenix-Pl.github.io/post/xss%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/xss%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. XSS简介 跨站脚本攻击XSS(Cross Site Script) 为了不和层叠式演示表(Cascading Style Sheets，CSS) 的缩写混淆,故将跨站脚本攻击缩写为XSS。 XSS跨站脚本攻击（Cross Site Scriptin</description>
    </item>
    
    <item>
      <title>从DVWA看(SQL Injection)SQL注入</title>
      <link>https://Phoenix-Pl.github.io/post/dvwasql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwasql%E6%B3%A8%E5%85%A5/</guid>
      <description>定义 SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽</description>
    </item>
    
    <item>
      <title>从DVWA看Brute Force(暴力破解)</title>
      <link>https://Phoenix-Pl.github.io/post/dvwa%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwa%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</guid>
      <description>Brute Force 前置知识 Brute Force，即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。 暴力破解</description>
    </item>
    
    <item>
      <title>从DVWA看Command Injection(命令注入）</title>
      <link>https://Phoenix-Pl.github.io/post/dvwa%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwa%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</guid>
      <description>漏洞产生的原因 在web程序中，因为业务功能需求要通过web前端传递参数到后台服务器上执行（特别是一些网络设备的web管理界面），但由于开发人员没有对输入进行严格的过滤，导致漏洞攻击者可以通过提交恶意构</description>
    </item>
    
    <item>
      <title>从DVWA看CSRF</title>
      <link>https://Phoenix-Pl.github.io/post/dvwacsrf/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwacsrf/</guid>
      <description>CSRF是啥 CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在</description>
    </item>
    
    <item>
      <title>从DVWA看SQL Injection (Blind) 盲注</title>
      <link>https://Phoenix-Pl.github.io/post/dvwasql%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwasql%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8/</guid>
      <description>定义 SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否</description>
    </item>
    
    <item>
      <title>从DVWA看XSS</title>
      <link>https://Phoenix-Pl.github.io/post/dvwaxss/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwaxss/</guid>
      <description>XSS Reflected Low 贴下代码先 &amp;lt;?php header (&amp;quot;X-XSS-Protection: 0&amp;quot;); // Is there any input? if( array_key_exists( &amp;quot;name&amp;quot;, $_GET ) &amp;amp;&amp;amp; $_GET[ &#39;name&#39; ] != NULL ) { // Feedback for end user echo &#39;&amp;lt;pre&amp;gt;Hello &#39; . $_GET[ &#39;name&#39; ] . &#39;&amp;lt;/pre&amp;gt;&#39;; } ?&amp;gt; 未进行过滤，这里构造一个常用payload payload：&amp;lt;script&amp;gt;alert(&amp;quot</description>
    </item>
    
    <item>
      <title>从DVWA看文件上传漏洞</title>
      <link>https://Phoenix-Pl.github.io/post/dvwaupload/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwaupload/</guid>
      <description>File Upload File Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Ap</description>
    </item>
    
    <item>
      <title>从DVWA看文件包含漏洞</title>
      <link>https://Phoenix-Pl.github.io/post/dvwainclude/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/dvwainclude/</guid>
      <description>File Inclusion File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_on</description>
    </item>
    
    <item>
      <title>关于VMware由15版本更新到16版本的报错问题</title>
      <link>https://Phoenix-Pl.github.io/post/vmware%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/vmware%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</guid>
      <description>报错1 无法打开内核设备“\.\VMCIDev\VMX”: 系统找不到指定的文件。你想要在安装 VMware Workstation 前重启吗? 这里打开以.vmx结尾的文件，如下图 搜索 vmci0.present，把后面的 TRUE 替换成 FALSE，</description>
    </item>
    
    <item>
      <title>完全小白教程：使用Github Pages和Gridea搭建个人博客</title>
      <link>https://Phoenix-Pl.github.io/post/gridea%E6%90%AD%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/post/gridea%E6%90%AD%E5%8D%9A%E5%AE%A2/</guid>
      <description>教大家如何来使用Github Pages和Gridea来搭建个人博客 1 关于Github Pages 来看看官方的介绍： GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://Phoenix-Pl.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://Phoenix-Pl.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
  </channel>
</rss>
